openapi: 3.0.1
info:
  description: 'REST API 定義'
  version: '1.0.0'
  title: 
    Fn::Sub: ${AWS::StackName}_restApi # API Gatewayに生成されるAPI名
paths:
  /slack-bot/interactive: # APIのパス
    post:
      summary: 'slackbotからのactionメッセージを処理するAPI'
      parameters: []
      requestBody: # bodyでデータを受け取る
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/payload'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/payload'
      responses:
        200:
          description: '成功時のレスポンス'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SetDataFunction.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
        requestTemplates:
          application/json: |
            {
              #set($rowApiData = $input.path("$"))
              #set($apiParams = $rowApiData.split("&"))
              #set($resultParams = [])
              #foreach( $kvRaw in $apiParams )
                #set($keyValue = $kvRaw.split("="))
                #if ( ( $keyValue[0] == "callback_id" ) || ( $keyValue[0] == "action_ts" ) )
                  #set($_ = $resultParams.add($kvRaw))
                #end
              #end
              {
                #foreach( $kvRaw in $resultParams )
                  #set($keyValue = $kvRaw.split("="))
                  "$util.urlDecode($keyValue[0])" : "$util.urlDecode($keyValue[1])" #if( $foreach.hasNext ),#end
                #end
              }
            }
          application/x-www-form-urlencoded: |
            {
              ## convert HTML FORM POST data to JSON for insertion directly into a Lambda function

              ## get the raw post data from the AWS built-in variable and give it a nicer name
              #set($rawPostData = $input.path('$'))

              ## first we get the number of "&" in the string, this tells us if there is more than one key value pair
              #set($countAmpersands = $rawPostData.length() - $rawPostData.replace("&", "").length())

              ## if there are no "&" at all then we have only one key value pair.
              ## we append an ampersand to the string so that we can tokenise it the same way as multiple kv pairs.
              ## the "empty" kv pair to the right of the ampersand will be ignored anyway.
              #if ($countAmpersands == 0)
              #set($rawPostData = $rawPostData + "&")
              #end

              ## now we tokenise using the ampersand(s)
              #set($tokenisedAmpersand = $rawPostData.split("&"))

              ## we set up a variable to hold the valid key value pairs
              #set($tokenisedEquals = [])

              ## now we set up a loop to find the valid key value pairs, which must contain only one "="
              #foreach( $kvPair in $tokenisedAmpersand )
              #set($countEquals = $kvPair.length() - $kvPair.replace("=", "").length())
              #if ($countEquals == 1)
                #set($kvTokenised = $kvPair.split("="))
                #if ($kvTokenised[0].length() > 0)
                ## we found a valid key value pair. add it to the list.
                #set($devNull = $tokenisedEquals.add($kvPair))
                #end
              #end
              #end

              ## next we set up our loop inside the output structure "{" and "}"
              {
              #foreach( $kvPair in $tokenisedEquals )
                ## finally we output the JSON for this pair and append a comma if this isn't the last pair
                #set($kvTokenised = $kvPair.split("="))
              "$kvTokenised[0]" : #if($kvTokenised[1].length() > 0)"$kvTokenised[1]"#{else}""#end#if( $foreach.hasNext ),#end
              #end
              }
            }
          
components:
  schemas:
    payload: 
      type: object
      properties: 
        actions: 
          type: array
          items:
            $ref: '#/components/schemas/action'
        callback_id:
          type: string 
        user: 
          type: object
          properties: 
            id: string
            name: string
    action: 
      type: object 
      properties:
        name:
          type: string
        value:
          type: string
        type:
          type: string
    
    device: # {'SerialNumber': 'abc-001', 'type': 1, 'status': 'working', 'power': 50}を定義
      type: object
      properties:
        SerialNumber:
          type: string
        type:
          type: integer
        status:
          type: string
        power:
          type: integer
    deviceList: # deviceのListを定義
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/device'